(function() {  "use strict";

  /**
   * WooCommerce Local Pickup Plus Public Holidays input field handler.
   *
   * This script controls the public holidays special custom field and should be
   * included on all admin screens where the calendar field is displayed.
   *
   * Note: this is not (or based off) a jQuery UI Datepicker, it's much simpler,
   * as the required calendar only needs to account 12 months statically, without
   * considering the actual year. This is meant to pick cyclical holidays that
   * should apply every year. While this won't be always accurate and definitely
   * problematic for setting variable lunar based holidays, it should provide enough
   * flexibility and simplicity to most installs.
   *
   * @since 2.0.0
   */
  jQuery(document).ready(function($) {
    var $calendar, $dates, $days, $field, $monthNav, $months, $shortcut, pagenow, ref, ref1, wc_local_pickup_plus_admin;
    wc_local_pickup_plus_admin = (ref = window.wc_local_pickup_plus_admin) != null ? ref : {};
    pagenow = (ref1 = window.pagenow) != null ? ref1 : '';

    /*
      * Local pickup plus admin screens.
     */
    if (wc_local_pickup_plus_admin.wc_settings_screen === pagenow || 'wc_pickup_location' === pagenow) {
      $field = $('.wc-local-pickup-plus-public-holidays-field');
      if ($field) {
        $calendar = $field.find('.calendar > table');
        $monthNav = $calendar.find('th.nav');
        $months = $calendar.find('.month');
        $days = $calendar.find('.day');
        $shortcut = $calendar.find('.jump');
        $dates = $field.find('.dates > select');
        $dates.select2();
        $dates.on('change', function(e) {
          var values;
          values = $(this).val();
          if (values) {
            return $days.each(function() {
              if (-1 === values.indexOf($(this).data('value'))) {
                return $(this).removeClass('selected');
              } else {
                return $(this).addClass('selected');
              }
            });
          }
        });
        $days.on('click', function(e) {
          var days;
          days = [];
          if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
          } else {
            $(this).addClass('selected');
          }
          $calendar.find('.selected').each(function() {
            return days.push($(this).data('value'));
          });
          if (wc_local_pickup_plus_admin.select2_version === '4.0.3') {
            $dates.val(days);
            return $dates.trigger('change');
          } else {
            return $dates.select2('val', days).trigger('change');
          }
        });
        $monthNav.on('click', function(e) {
          var newMonth, nextMonth, prevMonth;
          prevMonth = $calendar.find('th.prev-month');
          nextMonth = $calendar.find('th.next-month');
          newMonth = parseInt($(this).data('value'), 10);
          if (12 === newMonth) {
            prevMonth.data('value', 11);
            nextMonth.data('value', 1);
          } else if (1 === newMonth) {
            prevMonth.data('value', 12);
            nextMonth.data('value', 2);
          } else {
            prevMonth.data('value', newMonth - 1);
            nextMonth.data('value', newMonth + 1);
          }
          return $months.each(function() {
            if (newMonth === parseInt($(this).data('value'), 10)) {
              return $(this).show();
            } else {
              return $(this).hide();
            }
          });
        });
        return $shortcut.on('click', function(e) {
          var goToMonth;
          goToMonth = 0;
          if ($(this).hasClass('first-month')) {
            goToMonth = 1;
          } else if ($(this).hasClass('today')) {
            goToMonth = parseInt($(this).data('month'), 10);
          } else if ($(this).hasClass('last-month')) {
            goToMonth = 12;
          }
          if (goToMonth > 0) {
            return $months.each(function() {
              if (goToMonth === parseInt($(this).data('value'), 10)) {
                return $(this).show();
              } else {
                return $(this).hide();
              }
            });
          }
        });
      }
    }
  });

}).call(this);


