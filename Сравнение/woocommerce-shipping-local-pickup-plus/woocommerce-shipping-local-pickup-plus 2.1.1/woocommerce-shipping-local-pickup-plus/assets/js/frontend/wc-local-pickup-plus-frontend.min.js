(function() {  "use strict";

  /**
   * WooCommerce Local Pickup Plus cart / checkout scripts.
   *
   * @since 2.0.0
   */
  jQuery(document).ready(function($) {
    var block, initLookupArea, initPickupLocationsSearch, is_blocked, ref, unblock, wc_local_pickup_plus_frontend;
    wc_local_pickup_plus_frontend = (ref = window.wc_local_pickup_plus_frontend) != null ? ref : {};

    /**
    	 * Check if an element is blocked for processing.
    	 *
    	 * See `cart.js` from WooCommerce frontend scripts for similar function.
    	 *
    	 * @since 2.1.1
    	 *
    	 * @param {object} $node an element as a jQuery object
    	 * @return {bool} true if the DOM Element is UI Blocked, false if not
     */
    is_blocked = function($node) {
      if ($node) {
        return $node.is('.processing') || $node.parents('.processing').length;
      } else {
        return false;
      }
    };

    /**
    	 * Block an element visually for processing.
    	 *
    	 * See `cart.js` from WooCommerce frontend scripts for similar function.
    	 *
    	 * @since 2.1.1
    	 *
    	 * @param {object} $node an element as a jQuery object
     */
    block = function($node) {
      if ($node && !is_blocked($node)) {
        return $node.addClass('processing').block({
          message: null,
          overlayCSS: {
            background: '#fff',
            opacity: 0.6
          }
        });
      }
    };

    /**
    	 * Unblock a node after processing is complete.
    	 *
    	 * See `cart.js` from WooCommerce frontend scripts for similar function.
    	 *
    	 * @since 2.1.1
    	 *
    	 * @param {object} $node an element as a jQuery object
     */
    unblock = function($node) {
      if ($node) {
        return $node.removeClass('processing').unblock();
      }
    };

    /**
    	 * Init pickup location areas dropdown fields.
    	 *
    	 * @since 2.0.0
     */
    initLookupArea = function() {
      var $lookupAreaDropdown;
      $('a.enable-local-pickup, a.disable-local-pickup').on('click', function(e) {
        var $cartForm, $checkoutForm, $field, data, handling;
        e.preventDefault();
        $field = $(this).parent().parent();
        $cartForm = wc_local_pickup_plus_frontend.select2_version === '3.5.3' ? $('div.woocommerce > form') : $('form.woocommerce-cart-form');
        $checkoutForm = $('#order_review');
        if ($(this).hasClass('enable-local-pickup')) {
          handling = 'pickup';
          $field.find('a.enable-local-pickup').parent().hide();
          $field.find('a.disable-local-pickup').parent().show();
          $field.find('> div').show();
        } else {
          handling = 'ship';
          $field.find('a.enable-local-pickup').parent().show();
          $field.find('a.disable-local-pickup').parent().hide();
          $field.find('> div').hide();
        }
        block($cartForm);
        block($checkoutForm);
        data = {
          action: 'wc_local_pickup_plus_set_cart_item_handling',
          security: wc_local_pickup_plus_frontend.set_cart_item_handling_nonce,
          cart_item_key: $field.data('cart-item-id'),
          pickup_data: {
            handling: handling,
            lookup_area: $('.pickup-location-lookup-area').val(),
            pickup_location_id: $('.pickup-location-lookup').val()
          }
        };
        return $.post(wc_local_pickup_plus_frontend.ajax_url, data, function(response) {
          if (!response.success) {
            unblock($cartForm);
            unblock($checkoutForm);
            return console.log(response);
          } else {
            return location.reload();
          }
        });
      });
      $('.pickup-location-change-lookup-area').on('click', function(e) {
        var $changeArea, $container;
        e.preventDefault();
        $container = $(this).closest('div.pickup-location-lookup-area-field');
        $changeArea = $container.find('> div');
        return $changeArea.toggle();
      });
      $lookupAreaDropdown = $('select.pickup-location-lookup-area');
      $lookupAreaDropdown.select2();
      return $lookupAreaDropdown.on('change', function(e) {
        var $cartForm, $checkoutForm, $enabled, $label, data, fieldId, labelData;
        fieldId = $(this).closest('.pickup-location-lookup-area-field').data('cart-item-id');
        $enabled = $('#pickup-location-field-for-cart-item-' + fieldId).find('a.enable-local-pickup');
        if (true !== $enabled.is(':visible')) {
          $label = $('#pickup-location-lookup-area-field-for-cart-item-' + fieldId).find('em.pickup-location-current-lookup-area-label');
          labelData = $(this).select2('data');
          $cartForm = wc_local_pickup_plus_frontend.select2_version === '3.5.3' ? $('div.woocommerce > form') : $('form.woocommerce-cart-form');
          $checkoutForm = $('#order_review');
          if (labelData) {
            if (wc_local_pickup_plus_frontend.select2_version === '3.5.3') {
              $label.text(labelData.text);
            } else {
              if (labelData[0] && labelData[0]['text']) {
                $label.text(labelData[0]['text']);
              }
            }
          }
          block($cartForm);
          block($checkoutForm);
          data = {
            action: 'wc_local_pickup_plus_set_cart_item_handling',
            security: wc_local_pickup_plus_frontend.set_cart_item_handling_nonce,
            cart_item_key: fieldId,
            pickup_data: {
              handling: 'pickup',
              lookup_area: $(this).val(),
              pickup_location_id: $('#pickup-location-field-for-cart-item-' + fieldId).find('.pickup-location-lookup').val()
            }
          };
          return $.post(wc_local_pickup_plus_frontend.ajax_url, data, function(response) {
            unblock($cartForm);
            unblock($checkoutForm);
            if (!response.success) {
              return console.log(response);
            } else if (wc_local_pickup_plus_frontend.is_checkout) {
              return $('form.woocommerce-checkout').trigger('update_checkout');
            }
          });
        }
      });
    };

    /**
    	 * Init pickup location AJAX search.
    	 *
    	 * @since 2.0.0
     */
    initPickupLocationsSearch = function() {
      var $lookupField;
      if (wc_local_pickup_plus_frontend.select2_version === '3.5.3') {
        if (!wc_local_pickup_plus_frontend.use_enhanced_search) {
          $lookupField = $('select.pickup-location-lookup');
          $lookupField.select2();
        } else {
          $lookupField = $('input.pickup-location-lookup');
          $lookupField.select2({
            initSelection: function(el, cb) {
              var data, defaultLocationId;
              defaultLocationId = el.val();
              if ('' !== defaultLocationId) {
                data = {
                  action: 'wc_local_pickup_plus_get_pickup_location_name',
                  security: wc_local_pickup_plus_frontend.get_pickup_location_name_nonce,
                  id: defaultLocationId
                };
                return $.post(wc_local_pickup_plus_frontend.ajax_url, data, function(response) {
                  if (response && response.success && response.data) {
                    return cb({
                      id: defaultLocationId,
                      text: response.data
                    });
                  }
                });
              }
            },
            minimumInputLength: 2,
            formatInputTooShort: function() {
              return wc_local_pickup_plus_frontend.i18n.search_type_minimum_characters;
            },
            ajax: {
              url: wc_local_pickup_plus_frontend.ajax_url,
              cache: false,
              dataType: 'json',
              quietMillis: 250,
              data: function(term, page) {
                var $currentArea, cartItemID, productID;
                productID = $(this).data('product-id');
                cartItemID = $(this).data('cart-item-id');
                $currentArea = $(this).parent().find('#pickup-location-lookup-area-for-cart-item' + cartItemID);
                return {
                  term: term,
                  area: $currentArea ? $currentArea.find('option:selected').val() : '',
                  cart_item_id: cartItemID,
                  product_id: productID,
                  page: page,
                  security: wc_local_pickup_plus_frontend.pickup_locations_lookup_nonce,
                  action: 'wc_local_pickup_plus_pickup_locations_lookup'
                };
              },
              results: function(response) {
                var emptyResponse;
                emptyResponse = {
                  text: 'text',
                  results: []
                };
                if (response.success) {
                  if (response.success && response.data) {
                    return {
                      text: 'text',
                      results: response.data
                    };
                  } else {
                    return emptyResponse;
                  }
                } else {
                  return emptyResponse;
                }
              }
            }
          });
        }
      } else {
        $lookupField = $('select.pickup-location-lookup');
        if (!wc_local_pickup_plus_frontend.use_enhanced_search) {
          $lookupField.select2();
        } else {
          $lookupField.select2({
            initSelection: function(el, cb) {
              var data, defaultLocationId;
              defaultLocationId = el.val();
              if ('' !== defaultLocationId) {
                data = {
                  action: 'wc_local_pickup_plus_get_pickup_location_name',
                  security: wc_local_pickup_plus_frontend.get_pickup_location_name_nonce,
                  id: defaultLocationId
                };
                return $.post(wc_local_pickup_plus_frontend.ajax_url, data, function(response) {
                  if (response && response.success && response.data) {
                    return cb({
                      id: defaultLocationId,
                      text: response.data
                    });
                  }
                });
              }
            },
            minimumInputLength: 2,
            formatInputTooShort: function() {
              return wc_local_pickup_plus_frontend.i18n.search_type_minimum_characters;
            },
            ajax: {
              url: wc_local_pickup_plus_frontend.ajax_url,
              cache: false,
              dataType: 'json',
              delay: 250,
              data: function(params) {
                var $currentArea, cartItemID, productID;
                productID = $(this).data('product-id');
                cartItemID = $(this).data('cart-item-id');
                $currentArea = $(this).parent().find('#pickup-location-lookup-area-for-cart-item-' + cartItemID);
                return {
                  term: params.term,
                  area: $currentArea ? $currentArea.find('option:selected').val() : '',
                  cart_item_id: cartItemID,
                  product_id: productID,
                  page: params.page,
                  security: wc_local_pickup_plus_frontend.pickup_locations_lookup_nonce,
                  action: 'wc_local_pickup_plus_pickup_locations_lookup'
                };
              },
              processResults: function(response, params) {
                var terms;
                if (response && response.success && response.data) {
                  terms = response.data;
                } else {
                  terms = [];
                }
                return {
                  results: terms
                };
              }
            }
          });
        }
      }
      return $lookupField.on('change', function(e) {
        var $cartForm, $checkoutForm, data;
        $cartForm = wc_local_pickup_plus_frontend.select2_version === '3.5.3' ? $('div.woocommerce > form') : $('form.woocommerce-cart-form');
        $checkoutForm = $('#order_review');
        block($cartForm);
        block($checkoutForm);
        data = {
          action: 'wc_local_pickup_plus_set_cart_item_handling',
          security: wc_local_pickup_plus_frontend.set_cart_item_handling_nonce,
          cart_item_key: $(this).data('cart-item-id'),
          pickup_data: {
            handling: 'pickup',
            lookup_area: $('.pickup-location-lookup-area').val(),
            pickup_location_id: $(this).val()
          }
        };
        return $.post(wc_local_pickup_plus_frontend.ajax_url, data, function(response) {
          unblock($cartForm);
          unblock($checkoutForm);
          if (!response.success) {
            return console.log(response);
          } else if (wc_local_pickup_plus_frontend.is_checkout) {
            return $('form.woocommerce-checkout').trigger('update_checkout');
          }
        });
      });
    };
    initLookupArea();
    initPickupLocationsSearch();
    $(document.body).on('updated_checkout', function() {

      /**
      		 * Init pickup appointments calendar for a location pickup field.
      		 *
      		 * @since 2.0.0
      		 *
      		 * @param {object} $field Calendar field as jQuery object
      		 * @param {object} dates Calendar dates object
      		 * @param {bool} clear Whether to clear the current value
       */
      var $scheduleField, initPickupCalendar;
      initPickupCalendar = function($field, dates, clear) {
        var $calendar, locationID, packageID, unavailableDates;
        if (clear == null) {
          clear = false;
        }
        $calendar = $field.find('input.pickup-location-appointment-date');
        locationID = $calendar.data('location-id');
        packageID = $calendar.data('package-id');
        unavailableDates = dates.unavailable_dates ? $.map(dates.unavailable_dates, function(el) {
          return el;
        }) : [];
        if (clear) {
          $calendar.attr('value', '');
          $calendar.trigger('change');
          $calendar.removeClass('hasDatepicker');
          $calendar.datepicker('destroy');
        }
        return $calendar.datepicker({
          minDate: new Date(dates.calendar_start),
          maxDate: new Date(dates.calendar_end),
          dateFormat: 'yy-mm-dd',
          defaultDate: null,
          firstDay: wc_local_pickup_plus_frontend.start_of_week,
          monthNames: wc_local_pickup_plus_frontend.month_names,
          dayNamesMin: wc_local_pickup_plus_frontend.day_initials,
          prevText: '',
          nextText: '',
          beforeShow: function(input, instance) {
            return $(instance.dpDiv).addClass('pickup-location-appointment-datepicker');
          },
          beforeShowDay: function(date) {
            var dateString;
            dateString = $.datepicker.formatDate('yy-mm-dd', date);
            return [unavailableDates.indexOf(dateString) === -1];
          },
          onSelect: function() {
            var $datePicker, data, date, dateStr;
            $datePicker = $('#wc-local-pickup-plus-datepicker-' + packageID);
            locationID = $datePicker.data('location-id');
            dateStr = $datePicker.val();
            $calendar.attr('value', dateStr);
            if (dateStr && (date = new Date(dateStr))) {
              data = {
                action: 'wc_local_pickup_plus_set_package_handling',
                security: wc_local_pickup_plus_frontend.set_package_handling_nonce,
                pickup_date: dateStr,
                package_id: packageID,
                pickup_location_id: locationID
              };
              $.post(wc_local_pickup_plus_frontend.ajax_url, data, function(response) {
                if (!response.success) {
                  return console.log(response);
                }
              });
              data = {
                action: 'wc_local_pickup_plus_get_pickup_location_opening_hours_list',
                security: wc_local_pickup_plus_frontend.get_pickup_location_opening_hours_list_nonce,
                location: locationID,
                date: dateStr,
                day: date.getDay()
              };
              return $.post(wc_local_pickup_plus_frontend.ajax_url, data, function(response) {
                var $businessHours;
                $businessHours = $field.find('.pickup-location-schedule');
                $businessHours.empty();
                if (response && response.success) {
                  $businessHours.append(response.data);
                  return $('#wc-local-pickup-plus-datepicker-' + packageID).trigger('change');
                }
              });
            }
          }
        });
      };
      $scheduleField = $('.pickup-location-appointment');
      if ($scheduleField) {
        $scheduleField.each(function() {
          var $calendar, $field, locationID, requestData;
          $field = $(this);
          $calendar = $field.find('input.pickup-location-appointment-date');
          locationID = $calendar.data('location-id');
          requestData = {
            action: 'wc_local_pickup_plus_get_pickup_location_appointment_data',
            security: wc_local_pickup_plus_frontend.get_pickup_location_appointment_data_nonce,
            location: locationID
          };
          return $.post(wc_local_pickup_plus_frontend.ajax_url, requestData, function(response) {
            if (response.success) {
              return initPickupCalendar($field, response.data);
            }
          });
        });
      }
      initLookupArea();
      initPickupLocationsSearch();
      return $('#order_review').find('> p.woocommerce-shipping-contents').remove();
    });
    return $('#order_review').find('> p.woocommerce-shipping-contents').remove();
  });

}).call(this);


